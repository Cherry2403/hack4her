context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 5d920718-8311-47a1-b1f9-12a2561e6543
  error: null
  id: a94dd030-1bb3-4df1-90d0-61ba1db24938
  last_agent_tape_id: e02f6647-d9c1-4f2b-b9c1-3b598bce7af8
  n_added_steps: 1
  other: {}
  parent_id: e02f6647-d9c1-4f2b-b9c1-3b598bce7af8
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I'd like to reschedule my flight from Paris to Rome that's currently booked
    for this Friday to next Monday.
  kind: user
  metadata:
    agent: ''
    id: a344a2b2-90e4-49f0-a67a-43fdc9db9b17
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: ae21001f-dada-4283-8189-2e54ed5596c2
  query: I'd like to reschedule my flight from Paris to Rome that's currently booked
    for this Friday to next Monday.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: RequestFlightChange
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: cbe17951-d7ae-4ca0-a239-9fb42afc8cf5
- description: Request to change a flight, including original flight details (original
    flight number, departure date, and departure time), new flight details (new flight
    number, new departure date, and new departure time), and reason for change. This
    request is subject to FlyCorp's flight change policy, which allows changes up
    to 24 hours prior to the original flight's scheduled departure time. The request
    will be processed based on availability and may incur additional fees. The response
    will include a unique request ID, the status of the request (approved, denied,
    or pending), and a list of updated flight segments.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: RequestFlightChange
  parameters:
    properties:
      new_departure_date:
        description: The new departure date
        format: date
        type: string
      new_departure_time:
        description: The new departure time
        format: time
        type: string
      new_flight_number:
        description: The new flight number
        type: string
      original_departure_date:
        description: The original departure date
        format: date
        type: string
      original_departure_time:
        description: The original departure time
        format: time
        type: string
      original_flight_number:
        description: The original flight number
        type: string
      reason_for_change:
        description: The reason for changing the flight
        type: string
      travel_agent_id:
        description: The ID of the travel agent making the request (optional)
        type: string
    required:
    - original_flight_number
    - original_departure_date
    - original_departure_time
    - new_flight_number
    - new_departure_date
    - new_departure_time
    - reason_for_change
    type: object
  return_value:
    properties:
      request_id:
        description: The unique ID of the request
        type: string
      status:
        description: The status of the request
        enum:
        - approved
        - denied
        - pending
        type: string
      updated_flight_segments:
        description: A list of updated flight segments
        items:
          properties:
            departure_date:
              format: date
              type: string
            departure_time:
              format: time
              type: string
            flight_number:
              type: string
          type: object
        type: array
    required:
    - request_id
    - status
    - updated_flight_segments
    type: object
- function: RequestFlightChange
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 23a0eeb3-c495-4e52-9944-32905558ba84
  parameters:
    new_departure_date: next Monday
    original_departure_date: this Friday
- function: RequestFlightChange
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 47d7fa34-660f-4507-bbd9-f80a1824d073
  parameters:
    new_departure_date:
      explanation: '''next Monday'' corresponds to the date ''2024-12-09''.'
      status: valid
      value: '2024-12-09'
    original_departure_date:
      explanation: '''this Friday'' corresponds to the date ''2024-12-06''.'
      status: valid
      value: '2024-12-06'
- assign:
    new_departure_date: '2024-12-09'
    original_departure_date: '2024-12-06'
  function: RequestFlightChange
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 04d055df-d01e-4562-808b-9c42e02c1bec
  skip: []
- function: RequestFlightChange
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: ca51bb07-0410-4029-9caa-b24df95b9ea8
  parameters:
  - original_flight_number
- content: Noted, the original departure date is set to 2024-12-06 and the new departure
    date is set to 2024-12-09. Please provide the original flight number.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3348ec08-4391-400f-96b5-33e0c4b3c4bc
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3348ec08-4391-400f-96b5-33e0c4b3c4bc
  next_node: routing_node
- content: The original flight number is AF7773.
  kind: user
  metadata:
    agent: ''
    id: cb9e0e97-9dc4-4ff9-9e44-8e1c1d3f69be
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 4321a47d-aa01-4993-9ea5-f8fca2c9605a
  error: null
  id: 122cf230-4495-4d5c-aae1-aae882c6502f
  last_agent_tape_id: 28052438-7973-4298-9c31-c772107eb9d2
  n_added_steps: 1
  other: {}
  parent_id: 28052438-7973-4298-9c31-c772107eb9d2
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: What can you do for me?
  kind: user
  metadata:
    agent: ''
    id: d6843baa-f7e1-40e6-96c0-864af72b6c9f
    node: ''
    other:
      alias: init_message_ask
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: bd31a574-180d-4389-9935-9d4066e60c43
  query: What can you do for me?
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- kind: refuse_inexistent_function_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: b8de19af-b9fb-48d4-89c9-1e32083f8a9d
- functions:
  - BookFlight
  - CheckIn
  - RequestFlightChange
  kind: request_function_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: b8de19af-b9fb-48d4-89c9-1e32083f8a9d
- content: Unfortunately, I couldn't find a specific action related to your request.
    However, I can provide you with a list of possible services I can assist you with.
    You can book a flight, check-in for an existing flight, or request changes to
    your flight. Please let me know if any of these options meet your needs or clarify
    what you're looking for, and I'll do my best to help.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: b8de19af-b9fb-48d4-89c9-1e32083f8a9d
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: b8de19af-b9fb-48d4-89c9-1e32083f8a9d
  next_node: intent_discovery_node
- content: Book a flight from Paris to Tokyo.
  kind: user
  metadata:
    agent: ''
    id: 52e4a8ad-d5f2-4456-8257-d2aa30a45ee5
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: b50c5bfa-0a91-43a2-aed9-1d71215951ce
  error: null
  id: 278d6211-2b42-448a-83b9-350084b1fe87
  last_agent_tape_id: 5ffce0e2-5e1d-4a7c-a6ab-61f60521bd62
  n_added_steps: 1
  other: {}
  parent_id: 5ffce0e2-5e1d-4a7c-a6ab-61f60521bd62
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I'd like to request wheelchair assistance for my elderly mother who's travelling
    with me.
  kind: user
  metadata:
    agent: ''
    id: 9442150f-3fed-4940-9490-84973e8bdb47
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: c6ffbefa-e8d7-4395-9127-c0ab345c2f55
  query: I'd like to request wheelchair assistance for my elderly mother who's travelling
    with me.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: RequestWheelchairAssistance
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 4973ab28-3f37-4ad0-9391-e05c35550d29
- description: Request for wheelchair assistance for a passenger, including flight
    details and special requirements. This function requires the passenger's name,
    flight number, and departure date as mandatory parameters. Additionally, it accepts
    optional parameters for special requirements such as escort assistance or Braille
    signage. According to FlyCorp's policy, wheelchair assistance requests must be
    made at least 48 hours prior to the scheduled flight departure time. The function
    returns a unique request ID, the status of the request (either 'pending', 'approved',
    or 'denied'), and a list of assigned assistants.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: RequestWheelchairAssistance
  parameters:
    properties:
      braille_signage:
        default: false
        description: Whether Braille signage is required (optional).
        type: boolean
      departure_date:
        description: The scheduled departure date of the flight.
        format: date
        type: string
      escort_assistance:
        default: false
        description: Whether escort assistance is required (optional).
        type: boolean
      flight_number:
        description: The flight number for which wheelchair assistance is requested.
        type: string
      passenger_name:
        description: The full name of the passenger requiring wheelchair assistance.
        type: string
    required:
    - passenger_name
    - flight_number
    - departure_date
    type: object
  return_value:
    properties:
      assigned_assistants:
        description: A list of assigned assistants for the request.
        items:
          type: string
        type: array
      request_id:
        description: A unique identifier for the wheelchair assistance request.
        type: string
      status:
        description: The status of the request (pending, approved, or denied).
        enum:
        - pending
        - approved
        - denied
        type: string
    required:
    - request_id
    - status
    - assigned_assistants
    type: object
- function: RequestWheelchairAssistance
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 44bfe80e-95a1-4973-b1e5-a0673b5e07d5
  parameters: {}
- function: RequestWheelchairAssistance
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 937da7e3-d982-4fa6-93d4-dddad9fdea53
  parameters: {}
- assign: {}
  function: RequestWheelchairAssistance
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 64562214-ef03-41e5-8083-7227bc1d5963
  skip: []
- function: RequestWheelchairAssistance
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: ed22fa59-ff9f-46e5-add0-f11523aeb55a
  parameters:
  - passenger_name
- content: To assist with your wheelchair request, I'll need to know your mother's
    full name.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 8496bf2b-d847-4dee-b048-3a658a00ccb2
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 8496bf2b-d847-4dee-b048-3a658a00ccb2
  next_node: routing_node
- content: Her name is Evelynne Waters.
  kind: user
  metadata:
    agent: ''
    id: 3a43023e-41b8-4ad7-a259-f7b912db526f
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 3eb431e6-5c36-4374-9b1f-a645925b45b1
  error: null
  id: 1147b3b0-ba2c-4ddb-bd7b-79a9dcb27111
  last_agent_tape_id: e75c1ab2-52fa-45fe-966c-cfbbf971582d
  n_added_steps: 1
  other: {}
  parent_id: e75c1ab2-52fa-45fe-966c-cfbbf971582d
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I need to get a refund for the faulty watch that I bought from your store
    last week.
  kind: user
  metadata:
    agent: ''
    id: a3b4a2ed-2da8-4a1c-a208-35378c3e837e
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 4760e187-7744-402e-b684-c22d54e09789
  query: I need to get a refund for the faulty watch that I bought from your store
    last week.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- kind: refuse_inexistent_function_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 3568b5b9-03fa-46a7-92ab-3992acabed4f
- functions:
  - ReportLostLuggage
  - RequestRefund
  - RequestSpecialMeal
  kind: request_function_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 3568b5b9-03fa-46a7-92ab-3992acabed4f
- content: I apologize, but it seems that your request for a refund for a faulty watch
    is not related to our services. We are primarily focused on flight-related services.
    However, we do have some functions that might be of interest to you, such as reporting
    lost luggage or requesting a refund for a cancelled flight. Could you please clarify
    if any of these services are what you're looking for?
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 3568b5b9-03fa-46a7-92ab-3992acabed4f
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 3568b5b9-03fa-46a7-92ab-3992acabed4f
  next_node: intent_discovery_node
- content: No, I need help with a store that sold me a faulty watch, can you direct
    me to someone who can help?
  kind: user
  metadata:
    agent: ''
    id: 6e164826-25cf-45af-bae4-381bcf1b02ea
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 7c163d5e-3864-4426-8e07-995e04df7f3a
  error: null
  id: 71e253a0-4254-4945-8703-a7212592bb7a
  last_agent_tape_id: 26c2c1bf-c02a-4e5e-8a7f-6192333390c4
  n_added_steps: 1
  other: {}
  parent_id: 26c2c1bf-c02a-4e5e-8a7f-6192333390c4
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I'd like to check in for my flight to Paris that's scheduled to depart
    later today.
  kind: user
  metadata:
    agent: ''
    id: 50064a16-05fd-46bc-9837-745090dcb472
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 91dfb05c-ff65-4eb3-81ff-77881976090c
  query: I'd like to check in for my flight to Paris that's scheduled to depart later
    today.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: CheckIn
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 2e04e8a4-a029-4a3d-abc4-78ac59bec81f
- description: Request to check-in a passenger for a flight, including seat selection
    and baggage information. This function requires the passenger's booking reference,
    flight number, and last name as mandatory parameters. Optionally, the passenger
    can provide their preferred seat and baggage details. According to FlyCorp's check-in
    policy, online check-in is available 24 hours prior to the scheduled flight departure
    time. FlyCorp's baggage policy allows each passenger to check-in up to two bags,
    with a maximum weight of 23kg each. The function returns a unique request ID,
    the status of the check-in request (either'success' or 'failed'), and a list of
    checked-in baggage items.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: CheckIn
  parameters:
    properties:
      baggage_details:
        description: The passenger's baggage details (optional).
        type: string
      booking_reference:
        description: The passenger's booking reference.
        type: string
      flight_number:
        description: The flight number.
        type: string
      last_name:
        description: The passenger's last name.
        type: string
      preferred_seat:
        description: The passenger's preferred seat (optional).
        type: string
    required:
    - booking_reference
    - flight_number
    - last_name
    type: object
  return_value:
    properties:
      checked_baggage:
        description: A list of checked-in baggage items.
        items:
          properties:
            bag_id:
              type: string
            weight:
              type: number
          type: object
        type: array
      request_id:
        description: A unique ID for the check-in request.
        type: string
      status:
        description: The status of the check-in request.
        enum:
        - success
        - failed
        type: string
    required:
    - request_id
    - status
    - checked_baggage
    type: object
- function: CheckIn
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: f3b92bcf-d813-48ca-b2a9-8fc4af4f0abe
  parameters: {}
- function: CheckIn
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 92754304-40a7-4e73-b2ca-d92c91fc51f7
  parameters: {}
- assign: {}
  function: CheckIn
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 5731de71-4004-4c03-ad76-cf847eca3fd1
  skip: []
- function: CheckIn
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 0489866a-5bc3-4b20-9df9-86f8ca6a4792
  parameters:
  - booking_reference
- content: To check in for your flight, I'll need some information from you. Can you
    please provide your booking reference?
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: a45ca8fc-7030-47e1-b307-c068df2b8e84
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: a45ca8fc-7030-47e1-b307-c068df2b8e84
  next_node: routing_node
- content: My booking reference is XV8L6R, and I also have my passport and ID ready
    if you need to verify any other details.
  kind: user
  metadata:
    agent: ''
    id: 82c5ffc9-6ae2-484f-b574-e11286a02307
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 94cd4f31-6b6d-4355-830f-cbe0ae6381ff
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 02e95483-ead3-4aab-aa64-342bd212fa55
  next_node: gather_values_node
- function: CheckIn
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 0e51e4af-1caa-4048-88c8-c7a9473f7965
  parameters:
    booking_reference: XV8L6R
- function: CheckIn
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 8b507119-b9f0-4075-83d0-442bb2c071c6
  parameters:
    booking_reference:
      explanation: ''
      status: valid
      value: XV8L6R
- assign:
    booking_reference: XV8L6R
  function: CheckIn
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 947caaeb-1bd8-4916-a724-fcc29fa1a4b7
  skip: []
- kind: refuse_to_engage_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 947caaeb-1bd8-4916-a724-fcc29fa1a4b7
- function: CheckIn
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: fdc91b0c-d1a4-4257-8106-32abff05b540
  parameters:
  - flight_number
- content: Noted, the booking reference is XV8L6R. Now, please enter your flight number.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 174f7379-c345-43c1-8405-ab01bfbfa061
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 174f7379-c345-43c1-8405-ab01bfbfa061
  next_node: routing_node
- content: My flight number is AF1234.
  kind: user
  metadata:
    agent: ''
    id: f3f7376a-8a89-4ed0-a574-5c22662c19db
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 75796b2a-ccfb-417f-bf1a-f8ab60eae250
  error: null
  id: 30f01b3d-85bf-4083-b5f3-c656a463ceb0
  last_agent_tape_id: 1fd7c0d1-e882-4da6-b46c-84ee6e9a5bf8
  n_added_steps: 1
  other: {}
  parent_id: 1fd7c0d1-e882-4da6-b46c-84ee6e9a5bf8
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I need to change my seat assignment on the upcoming flight from New York
    to Los Angeles.
  kind: user
  metadata:
    agent: ''
    id: eec6f292-6a41-45a6-bfd4-077d1b8d5449
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 2355e570-1cd5-4ee8-86af-a09dfdc3ec73
  query: I need to change my seat assignment on the upcoming flight from New York
    to Los Angeles.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: UpdateSeatAssignment
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 89f28621-5f7b-4da6-a908-2c08f5686fdc
- description: Request to update a passenger's seat assignment on a flight, including
    seat number and class of service. This function requires the passenger's booking
    reference, flight number, and new seat assignment details. According to FlyCorp's
    policies, seat assignments can only be updated up to 24 hours prior to the scheduled
    flight departure time. Additionally, FlyCorp's rules dictate that passengers in
    Basic Economy class are not eligible for seat selection. The function returns
    a request ID, the status of the request (either'success' or 'failed'), and a list
    of available seats on the flight.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: UpdateSeatAssignment
  parameters:
    properties:
      booking_reference:
        description: The passenger's booking reference number.
        type: string
      current_class_of_service:
        description: The current class of service of the passenger (optional, but
          required if new_class_of_service is provided).
        enum:
        - Main Cabin
        - Comfort+
        - Premium Select
        - Delta One
        - Basic Economy
        type: string
      flight_number:
        description: The flight number for which the seat assignment needs to be updated.
        type: string
      new_class_of_service:
        description: The new class of service for the passenger (e.g. Main Cabin,
          Comfort+, etc.).
        enum:
        - Main Cabin
        - Comfort+
        - Premium Select
        - Delta One
        type: string
      new_seat_number:
        description: The new seat number to be assigned to the passenger.
        type: string
    required:
    - booking_reference
    - flight_number
    - new_seat_number
    type: object
  return_value:
    properties:
      available_seats:
        description: A list of available seats on the flight.
        items:
          type: string
        type: array
      request_id:
        description: The unique ID of the request.
        type: string
      status:
        description: The status of the request (either'success' or 'failed').
        enum:
        - success
        - failed
        type: string
    required:
    - request_id
    - status
    - available_seats
    type: object
- function: UpdateSeatAssignment
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: b249dc4a-26e1-4206-9341-5a94d41c0c65
  parameters: {}
- function: UpdateSeatAssignment
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 67f564c3-d6cf-4a43-aa59-b6c45ef50169
  parameters: {}
- assign: {}
  function: UpdateSeatAssignment
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 92183d25-2649-4352-b507-d298c9c35c24
  skip: []
- function: UpdateSeatAssignment
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: c2c071b7-9204-4cca-86e9-30356123be85
  parameters:
  - booking_reference
- content: To update your seat assignment, I'll need your booking reference number.
    Please enter your booking reference.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: e58b5ed8-0b79-47fd-95a5-2898dd0a5d05
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: e58b5ed8-0b79-47fd-95a5-2898dd0a5d05
  next_node: routing_node
- content: My booking reference is LX8G2H.
  kind: user
  metadata:
    agent: ''
    id: f94191cf-30e9-4f07-aea3-f4f2cea2e26c
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 1c51baea-e237-4e40-8d83-33102b4c2fcf
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: eb84e1ce-ce89-44ba-afe8-ad323b8afb0f
  next_node: gather_values_node
- function: UpdateSeatAssignment
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: baf97fab-6945-4446-9197-606995e6976e
  parameters:
    booking_reference: LX8G2H
- function: UpdateSeatAssignment
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: dd4aaa9c-94ea-4272-838f-8298430e0b49
  parameters:
    booking_reference:
      explanation: ''
      status: valid
      value: LX8G2H
- assign:
    booking_reference: LX8G2H
  function: UpdateSeatAssignment
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: cef7d8ab-568a-4bd4-8617-ade8d1f569d0
  skip: []
- function: UpdateSeatAssignment
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 606f7d61-5c21-4055-b33a-88ff95ce5c2e
  parameters:
  - flight_number
- content: Noted, your booking reference is LX8G2H. Please enter your flight number
    for which you'd like to update the seat assignment.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 544ac8ef-53d5-4737-a359-219fc7160fa8
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 544ac8ef-53d5-4737-a359-219fc7160fa8
  next_node: routing_node
- content: My flight number is AA2421.
  kind: user
  metadata:
    agent: ''
    id: b34b5a0d-af53-41bd-9641-eb6575b4bcd8
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 6a44fc06-e7af-43a2-a698-9966305086fb
  error: null
  id: c2075133-5029-4832-9888-af7804575461
  last_agent_tape_id: 60b5b635-4446-4c59-a7f9-1966d5206550
  n_added_steps: 1
  other: {}
  parent_id: 60b5b635-4446-4c59-a7f9-1966d5206550
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to update my passenger information for the upcoming flight to Tokyo.
  kind: user
  metadata:
    agent: ''
    id: fee44169-d6c2-4ed6-8bc2-76fe5ebdcae2
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 5166855a-6b89-4452-b17a-1b69fb5a055a
  query: I want to update my passenger information for the upcoming flight to Tokyo.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: UpdatePassengerInformation
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 49c54d48-2fda-485b-8a0f-d4e767720ce6
- description: Request to update a passenger's personal information, including name,
    contact details, and loyalty program information. This function requires the passenger's
    ID, new name, email address, and phone number as mandatory parameters. The loyalty
    program information is optional. According to FlyCorp's policy, passengers can
    only update their own information, and the new email address must not be already
    in use by another passenger. The function returns a request ID, the status of
    the request (either'success' or 'failed'), and a list of updated loyalty programs.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: UpdatePassengerInformation
  parameters:
    properties:
      email:
        description: The new email address of the passenger.
        type: string
      loyalty_program:
        description: The new loyalty program information (optional).
        type: string
      new_name:
        description: The new name of the passenger.
        type: string
      passenger_id:
        description: The ID of the passenger to update.
        type: integer
      phone_number:
        description: The new phone number of the passenger.
        type: string
    required:
    - passenger_id
    - new_name
    - email
    - phone_number
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the update request.
        type: string
      status:
        description: The status of the request.
        enum:
        - success
        - failed
        type: string
      updated_loyalty_programs:
        description: A list of updated loyalty programs.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    type: object
- function: UpdatePassengerInformation
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: e975ed30-c88d-4d74-bac9-b31ac775698a
  parameters: {}
- function: UpdatePassengerInformation
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: fe9d8270-8966-4e1e-9f3c-fb61e9adc102
  parameters: {}
- assign: {}
  function: UpdatePassengerInformation
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: ba3d7f2e-574f-4a8d-bd67-ccd9b03b94b0
  skip: []
- function: UpdatePassengerInformation
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 19e8b3e9-6c1e-4e6b-9539-921caa50c7e4
  parameters:
  - passenger_id
- content: To update your passenger information, please enter your passenger ID.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: eaface14-5e66-4101-bbb8-1030ddf8b21f
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: eaface14-5e66-4101-bbb8-1030ddf8b21f
  next_node: routing_node
- content: My passenger ID is KT685219 and you can also update my email to amykwon1992@gmail.com.
  kind: user
  metadata:
    agent: ''
    id: 357c2d1e-eec6-4ea9-84ea-8f4391bb2bb5
    node: ''
    other:
      alias: multislot_instruct3a
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 03ca483d-edd4-436a-ac05-f95c688dbc01
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: f69f1604-346f-4562-8c80-ab854b9a5c49
  next_node: gather_values_node
- function: UpdatePassengerInformation
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 261e39df-9913-4175-ad59-70fb640cdf82
  parameters:
    email: amykwon1992@gmail.com
    passenger_id: KT685219
- function: UpdatePassengerInformation
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: e7161b47-8ace-4037-b4d3-c11a2ce78bdb
  parameters:
    email:
      explanation: It is a valid email address.
      status: valid
      value: amykwon1992@gmail.com
    passenger_id:
      explanation: The value should be an integer.
      status: invalid
      value: KT685219
- function: UpdatePassengerInformation
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: c2e9b17b-2eb4-47a5-b233-eec0f5a0e881
  parameter: passenger_id
  parameter_value: KT685219
- assign:
    email: amykwon1992@gmail.com
  function: UpdatePassengerInformation
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: c2e9b17b-2eb4-47a5-b233-eec0f5a0e881
  skip: []
- function: UpdatePassengerInformation
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 105e9b70-fe04-4d3a-a07e-f8db7c7ef50c
  parameters:
  - passenger_id
- content: Noted, the new email address is amykwon1992@gmail.com. However, the passenger
    ID provided, KT685219, is invalid. Please enter a valid passenger ID.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: fc6dcd5a-f636-44b2-b8c6-bf62c82c4584
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: fc6dcd5a-f636-44b2-b8c6-bf62c82c4584
  next_node: routing_node
- content: My passenger ID is KT685212.
  kind: user
  metadata:
    agent: ''
    id: 2a1f7046-8399-40b1-b3cf-6462b28ae029
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: ba3a193c-05cb-4ab2-89fd-099c55690aa3
  error: null
  id: 869ab4c5-13f1-41df-8557-2aae10afdd73
  last_agent_tape_id: d407a049-2290-4796-9d21-d6941799e048
  n_added_steps: 1
  other: {}
  parent_id: d407a049-2290-4796-9d21-d6941799e048
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to add a meal to my flight reservation, can you help me with that?
  kind: user
  metadata:
    agent: ''
    id: 94727fe1-aa63-4074-aa44-d58e3d995b98
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 63da81d5-131f-4a77-b37f-fdbd5721b18c
  query: I want to add a meal to my flight reservation, can you help me with that?
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: AddAncillaryService
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 19f2454a-1f93-4bc3-82b7-919d8a042a28
- description: Request to add an ancillary service to a flight booking, including
    service type and payment details. This function requires the flight booking ID,
    service type (either 'baggage' or'meal'), and payment method (either 'credit card'
    or 'cash'). According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. If the service is successfully added, the function returns
    a request ID, the status of the request ('pending', 'approved', or'rejected'),
    and a list of the updated services associated with the flight booking. If the
    service is already added, the function returns an error message.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: AddAncillaryService
  parameters:
    properties:
      flight_booking_id:
        description: The ID of the flight booking.
        type: integer
      payment_method:
        description: The payment method.
        enum:
        - credit card
        - cash
        type: string
      service_type:
        description: The type of ancillary service.
        enum:
        - baggage
        - meal
        type: string
      special_instructions:
        description: Any special instructions for the ancillary service.
        type: string
    required:
    - flight_booking_id
    - service_type
    - payment_method
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the request.
        type: string
      status:
        description: The status of the request.
        enum:
        - pending
        - approved
        - rejected
        type: string
      updated_services:
        description: The list of updated services associated with the flight booking.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    - updated_services
    type: object
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: a27efad7-2ea3-4d68-9e10-37b86379d2da
  parameters:
    service_type: meal
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 3368dd37-401b-4f51-a0f0-79da3e158431
  parameters:
    service_type:
      explanation: ''
      status: valid
      value: meal
- assign:
    service_type: meal
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 5317a033-f532-4be4-bdc9-9b279133b581
  skip: []
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 45cfd32e-65d4-4c17-a3fa-e04b06c6ce04
  parameters:
  - flight_booking_id
- content: Noted, the service type is set to meal. Please enter your flight booking
    ID.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 7f90e145-aea0-4989-84e3-d56250392432
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 7f90e145-aea0-4989-84e3-d56250392432
  next_node: routing_node
- content: My flight booking ID is VX93JGKD9RS8N1Y, it was booked on the 15th of March
    for a flight from Paris Charles de Gaulle to New York John F Kennedy, scheduled
    to depart on the 10th of August.
  kind: user
  metadata:
    agent: ''
    id: 03a086d1-77b0-4f50-98b0-93ac028db1d6
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 4cac0a5c-b3fd-4262-a460-e49fa4b8503d
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 9b34e032-0b65-4a77-b589-848f285864cd
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: aa01c79d-9535-465c-a6ea-72cc9f8d1594
  parameters:
    flight_booking_id: VX93JGKD9RS8N1Y
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 0de98e05-3791-414a-b585-2aa1556087d7
  parameters:
    flight_booking_id:
      explanation: The value should be an integer.
      status: invalid
      value: VX93JGKD9RS8N1Y
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 275e6435-f086-436c-a4ae-5961502c970b
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 275e6435-f086-436c-a4ae-5961502c970b
  parameter: flight_booking_id
  parameter_value: VX93JGKD9RS8N1Y
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 1ed10067-64fb-4f3f-b04d-e3b11fe92327
  parameters:
  - flight_booking_id
- content: It seems you didn't enter the flight booking ID last time. The flight booking
    ID provided is invalid. Please enter the correct flight booking ID which should
    be an integer.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: bf7b8c13-6e2b-43b5-bc63-7c946b43740a
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: bf7b8c13-6e2b-43b5-bc63-7c946b43740a
  next_node: routing_node
- content: My flight booking ID is 8574632109.
  kind: user
  metadata:
    agent: ''
    id: 976c28ff-d59b-4d38-bb33-accdbfc1687a
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 55d1be82-b93e-4f8c-9d26-6ec08085ac85
  error: null
  id: 57cefb6d-8d8a-4f34-9311-8d52a533530d
  last_agent_tape_id: 05ce4b13-9183-4914-9d7a-0b87497eacc9
  n_added_steps: 1
  other: {}
  parent_id: 05ce4b13-9183-4914-9d7a-0b87497eacc9
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to request a refund for my cancelled flight to Paris last week.
  kind: user
  metadata:
    agent: ''
    id: b3be4ef4-35f8-4d88-b5b3-7ede6c37bb5c
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: ac87aa4c-e9cf-440b-9063-00526d57fc79
  query: I want to request a refund for my cancelled flight to Paris last week.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: RequestRefund
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 91fcf7e1-d0cd-4060-8493-ae0776a72058
- description: 'Request for a refund for a cancelled or changed flight, including
    flight details and reason for refund. This function requires the flight number,
    original booking date, and reason for refund as mandatory parameters. The reason
    for refund must be one of the following: ''flight cancellation'',''schedule change'',
    or ''voluntary change''. FlyCorp''s refund policy states that refunds will be
    processed within 7-10 business days. The function returns a unique request ID,
    the status of the request (either ''pending'', ''approved'', or''rejected''),
    and a list of comments from the FlyCorp customer service team.'
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: RequestRefund
  parameters:
    properties:
      flight_number:
        description: The number of the cancelled or changed flight.
        type: string
      original_booking_date:
        description: The original date of booking.
        format: date
        type: string
      passenger_name:
        description: The name of the passenger (optional).
        type: string
      reason_for_refund:
        description: The reason for requesting a refund.
        enum:
        - flight cancellation
        - schedule change
        - voluntary change
        type: string
    required:
    - flight_number
    - original_booking_date
    - reason_for_refund
    type: object
  return_value:
    properties:
      comments:
        description: A list of comments from the FlyCorp customer service team.
        items:
          type: string
        type: array
      request_id:
        description: A unique ID for the refund request.
        type: string
      status:
        description: The status of the refund request.
        enum:
        - pending
        - approved
        - rejected
        type: string
    required:
    - request_id
    - status
    - comments
    type: object
- function: RequestRefund
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 183d59c7-4719-4304-ac48-55ecb9322528
  parameters:
    reason_for_refund: flight cancellation
- function: RequestRefund
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: a2cb0500-4e58-42de-8e39-588f4031928a
  parameters:
    reason_for_refund:
      explanation: ''
      status: valid
      value: flight cancellation
- assign:
    reason_for_refund: flight cancellation
  function: RequestRefund
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 26de204a-0558-4964-a765-17db5dc200b1
  skip: []
- function: RequestRefund
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: a37da4ed-36df-4ed5-af4b-505fa40efaa9
  parameters:
  - flight_number
- content: Noted, the reason for refund is flight cancellation. Please enter the flight
    number of your cancelled flight.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 90c0e8d2-547f-4940-bb05-bf5ad7c64f69
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 90c0e8d2-547f-4940-bb05-bf5ad7c64f69
  next_node: routing_node
- content: My flight number was AF2112 and I originally booked the ticket on February
    10th.
  kind: user
  metadata:
    agent: ''
    id: 0c9f51ee-0ecd-4133-9ee5-4c953be10b5c
    node: ''
    other:
      alias: multislot_instruct3a
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 23b93f01-17ff-4d75-8466-3bf1bfe9f7da
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 25ee45bc-d038-47e7-ad01-bacddd06fca3
  next_node: gather_values_node
- function: RequestRefund
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 46a6bf9d-e4bd-429e-a49b-ef8183417bc9
  parameters:
    flight_number: AF2112
    original_booking_date: February 10th
- function: RequestRefund
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: d9057413-739f-49f4-8522-29508f9e6a22
  parameters:
    flight_number:
      explanation: ''
      status: valid
      value: AF2112
    original_booking_date:
      explanation: '''February 10th'' can be converted to a date.'
      status: valid
      value: '2024-02-10'
- assign:
    flight_number: AF2112
    original_booking_date: '2024-02-10'
  function: RequestRefund
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 94891b90-476d-4dab-b813-375e37cf606d
  skip: []
- function: RequestRefund
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: afbb121d-715c-4865-90e1-26721269f28b
  parameters:
  - passenger_name
- content: Noted, the flight number is AF2112 and the original booking date is February
    10th. Please enter the passenger's name for the refund request. This is optional
    and can be skipped.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 60198c63-31c8-4a5f-8038-f14ebd360fe6
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 60198c63-31c8-4a5f-8038-f14ebd360fe6
  next_node: routing_node
- content: I'd rather not provide the passenger's name at this time, can we skip this
    step and proceed with the refund request?
  kind: user
  metadata:
    agent: ''
    id: 967b55fc-099e-44d7-a038-3422b05286ec
    node: ''
    other:
      alias: skip_optional
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 88d60f21-e23d-4623-8a03-a611e2204786
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: edd9f644-bbbb-4e68-872a-48d2906ec297
  next_node: gather_values_node
- function: RequestRefund
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 98cc56da-dcf2-4ca1-9f32-32ccb9b92a89
  parameters:
    passenger_name: <|skip|>
- function: RequestRefund
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 3d7f93cb-2f90-4120-96db-cbc5901147bc
  parameters:
    passenger_name:
      explanation: ''
      status: valid
      value: <|skip|>
- assign: {}
  function: RequestRefund
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 775f5b8b-b1f5-413e-9a7b-ee14d836f9cf
  skip:
  - passenger_name
- function: RequestRefund
  kind: request_function_call_confirmation_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: cec87781-6911-4112-8aa9-fdb7eec2e0f9
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: cec87781-6911-4112-8aa9-fdb7eec2e0f9
  next_node: write_confirmation_node
- content: I skipped passenger name.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: write_confirmation_node
    other: {}
    prompt_id: f2ef75e3-67bf-47be-9545-32a9afc912b8
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: write_confirmation_node
    other: {}
    prompt_id: f2ef75e3-67bf-47be-9545-32a9afc912b8
  next_node: routing_node
- content: What is the next step for the refund request?
  kind: user
  metadata:
    agent: ''
    id: ad440196-db4d-417e-be90-6b1d3ecfe590
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 9aae3d0c-3794-48d6-92ae-66e99f71736f
  error: null
  id: 6e6b5aa8-eba3-4f61-bb05-67b64a6e8891
  last_agent_tape_id: 6252ead0-f9f7-42c0-aac3-38e78201cc08
  n_added_steps: 1
  other: {}
  parent_id: 6252ead0-f9f7-42c0-aac3-38e78201cc08
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to add a meal service to my existing flight booking, please.
  kind: user
  metadata:
    agent: ''
    id: e9711334-2fcd-4098-97d7-555dcac3201d
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 94b4f7ec-6d6e-4e4b-8e86-069877da1761
  query: I want to add a meal service to my existing flight booking, please.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: AddAncillaryService
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 8147fb6b-7e7e-4106-bfd7-3c5d4708519e
- description: Request to add an ancillary service to a flight booking, including
    service type and payment details. This function requires the flight booking ID,
    service type (either 'baggage' or'meal'), and payment method (either 'credit card'
    or 'cash'). According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. If the service is successfully added, the function returns
    a request ID, the status of the request ('pending', 'approved', or'rejected'),
    and a list of the updated services associated with the flight booking. If the
    service is already added, the function returns an error message.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: AddAncillaryService
  parameters:
    properties:
      flight_booking_id:
        description: The ID of the flight booking.
        type: integer
      payment_method:
        description: The payment method.
        enum:
        - credit card
        - cash
        type: string
      service_type:
        description: The type of ancillary service.
        enum:
        - baggage
        - meal
        type: string
      special_instructions:
        description: Any special instructions for the ancillary service.
        type: string
    required:
    - flight_booking_id
    - service_type
    - payment_method
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the request.
        type: string
      status:
        description: The status of the request.
        enum:
        - pending
        - approved
        - rejected
        type: string
      updated_services:
        description: The list of updated services associated with the flight booking.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    - updated_services
    type: object
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 8e593740-f7db-4066-bca2-ca8db3839ede
  parameters:
    service_type: meal
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 09f82fcd-4c04-40b7-a3fa-8661dcf38a05
  parameters:
    service_type:
      explanation: ''
      status: valid
      value: meal
- assign:
    service_type: meal
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 2645dc12-bf0c-481e-b60f-8684f490faba
  skip: []
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: f6bf30ba-b3cc-4b06-9f26-924ea25ac74b
  parameters:
  - flight_booking_id
- content: Noted, you would like to add a meal service. Please enter your flight booking
    ID to proceed.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: d10aae43-cfc3-47d4-b3b2-12a9b21546b6
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: d10aae43-cfc3-47d4-b3b2-12a9b21546b6
  next_node: routing_node
- content: V8EXFHR.
  kind: user
  metadata:
    agent: ''
    id: 52236cf1-91a1-45cb-a7f7-2f9e90ab48ba
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: fd286db6-b543-4fec-b73e-e8565eec4864
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 5b3723ef-e986-4a3c-bec1-e77bc1c8792f
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: a45df0ea-70eb-4b61-897a-f271b7809ef2
  parameters:
    flight_booking_id: V8EXFHR
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 94fc0194-100d-4a23-8b57-3a1860bb4df0
  parameters:
    flight_booking_id:
      explanation: The value should be an integer.
      status: invalid
      value: V8EXFHR
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: e03c4c1f-d683-493f-9657-51dac83460b4
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: e03c4c1f-d683-493f-9657-51dac83460b4
  parameter: flight_booking_id
  parameter_value: V8EXFHR
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: d928d628-f4e5-4c18-aa06-88b0435b1dcd
  parameters:
  - flight_booking_id
- content: The flight booking ID should be a number. The provided value 'V8EXFHR'
    is not valid. Please enter a correct flight booking ID to proceed with adding
    a meal service.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3559c94e-d628-432b-84f8-ad51443087d7
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3559c94e-d628-432b-84f8-ad51443087d7
  next_node: routing_node
- content: My booking ID is 982734, I'll pay by Visa card, and can you also make sure
    that the meal is gluten-free and served before the in-flight movie starts?
  kind: user
  metadata:
    agent: ''
    id: 6e2e4238-1c3e-4e61-a2ee-53cbb158b595
    node: ''
    other:
      alias: multislot_instruct3b
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 61c73261-adad-4c38-80e3-e081737079b9
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 78e49da8-d795-4aab-b5a6-ab2e9ed106d2
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 0dcc5a21-bb6d-456d-93ff-e3caf3f1d4e8
  parameters:
    flight_booking_id: 982734
    payment_method: credit card
    service_type: meal
    special_instructions: make sure that the meal is gluten-free and served before
      the in-flight movie starts
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 20f11020-1ad4-476e-877e-5ceb9ae27e76
  parameters:
    flight_booking_id:
      explanation: The value is a valid integer.
      status: valid
      value: 982734
    payment_method:
      explanation: '''Visa card'' is a type of ''credit card''.'
      status: valid
      value: credit card
    service_type:
      explanation: ''
      status: valid
      value: meal
    special_instructions:
      explanation: ''
      status: valid
      value: make sure that the meal is gluten-free and served before the in-flight
        movie starts
- assign:
    flight_booking_id: 982734
    payment_method: credit card
    special_instructions: make sure that the meal is gluten-free and served before
      the in-flight movie starts
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 6f5f1e9f-dc21-4b6f-b757-1c74e8da33c0
  skip: []
- function: AddAncillaryService
  kind: request_function_call_confirmation_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 44ea04f0-5105-474a-b17f-2c5f3a35a259
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 44ea04f0-5105-474a-b17f-2c5f3a35a259
  next_node: write_confirmation_node
- content: I assigned 982734 to flight booking id, selected credit card as the payment
    method, and noted to make sure that the meal is gluten-free and served before
    the in-flight movie starts in special instructions.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: write_confirmation_node
    other: {}
    prompt_id: aad3482b-fe40-4f9b-b0bc-5eed23f295ee
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: write_confirmation_node
    other: {}
    prompt_id: aad3482b-fe40-4f9b-b0bc-5eed23f295ee
  next_node: routing_node
- content: What is the total cost for the meal service and when do I need to pay?
  kind: user
  metadata:
    agent: ''
    id: 0d01404a-b1e3-4841-ad4a-0c3d0c3052b2
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: a2661bb6-e4d6-4c0f-91eb-476e50d2e1c7
  error: null
  id: 0a70849c-ff10-40e2-a9f4-dff51ab3f0b5
  last_agent_tape_id: 65de0d70-3e8a-4f4e-a33a-a6d520b40e1f
  n_added_steps: 1
  other: {}
  parent_id: 65de0d70-3e8a-4f4e-a33a-a6d520b40e1f
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to update the passenger information for my upcoming flight to Tokyo
    next week.
  kind: user
  metadata:
    agent: ''
    id: ff0ca453-8f4e-4251-96e3-8001bc19cc2a
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 802161fa-8dcf-4113-966e-1e8d0dc98baa
  query: I want to update the passenger information for my upcoming flight to Tokyo
    next week.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: UpdatePassengerInformation
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: f6694612-77f9-4873-aa7f-8c441158982c
- description: Request to update a passenger's personal information, including name,
    contact details, and loyalty program information. This function requires the passenger's
    ID, new name, email address, and phone number as mandatory parameters. The loyalty
    program information is optional. According to FlyCorp's policy, passengers can
    only update their own information, and the new email address must not be already
    in use by another passenger. The function returns a request ID, the status of
    the request (either'success' or 'failed'), and a list of updated loyalty programs.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: UpdatePassengerInformation
  parameters:
    properties:
      email:
        description: The new email address of the passenger.
        type: string
      loyalty_program:
        description: The new loyalty program information (optional).
        type: string
      new_name:
        description: The new name of the passenger.
        type: string
      passenger_id:
        description: The ID of the passenger to update.
        type: integer
      phone_number:
        description: The new phone number of the passenger.
        type: string
    required:
    - passenger_id
    - new_name
    - email
    - phone_number
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the update request.
        type: string
      status:
        description: The status of the request.
        enum:
        - success
        - failed
        type: string
      updated_loyalty_programs:
        description: A list of updated loyalty programs.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    type: object
- function: UpdatePassengerInformation
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 1b8eaa68-6afa-4d47-bebe-a16d206532ea
  parameters: {}
- function: UpdatePassengerInformation
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 9c942a9f-acba-4ea9-96f9-c5e677397ed9
  parameters: {}
- assign: {}
  function: UpdatePassengerInformation
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: da10f31c-f1bf-46e9-b9cf-ce5be0817917
  skip: []
- function: UpdatePassengerInformation
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 7ca49dfe-e05d-43d8-8046-ee44697d8715
  parameters:
  - passenger_id
- content: To update your passenger information, please enter your passenger ID.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 70bea992-c8bd-4cf5-81ec-967a84ee46d8
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 70bea992-c8bd-4cf5-81ec-967a84ee46d8
  next_node: routing_node
- content: My passenger ID is TK0089, I'd like to update my name to Emily Sakura,
    my new phone number is 972-248-1190, and I'd also like to add my loyalty program,
    which is ANA Mileage Club.
  kind: user
  metadata:
    agent: ''
    id: 873efa90-621b-431b-a967-08c15efae3a6
    node: ''
    other:
      alias: multislot_instruct3c
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 69e29779-e290-4346-a35e-979edaabc2f7
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: b914c6e2-5144-4e4e-b158-ec0bd7174b24
  next_node: gather_values_node
- function: UpdatePassengerInformation
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: d7c463e7-2e81-4fd8-a220-c4b3cfeda4b5
  parameters:
    loyalty_program: ANA Mileage Club
    new_name: Emily Sakura
    passenger_id: TK0089
    phone_number: 972-248-1190
- function: UpdatePassengerInformation
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 8cf63233-f6ad-425a-8dae-2fc09c663852
  parameters:
    loyalty_program:
      explanation: ''
      status: valid
      value: ANA Mileage Club
    new_name:
      explanation: ''
      status: valid
      value: Emily Sakura
    passenger_id:
      explanation: The value should be an integer.
      status: invalid
      value: TK0089
    phone_number:
      explanation: ''
      status: valid
      value: 972-248-1190
- function: UpdatePassengerInformation
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 854ef37b-bb29-4813-8f08-7241d7f6e646
  parameter: passenger_id
  parameter_value: TK0089
- assign:
    loyalty_program: ANA Mileage Club
    new_name: Emily Sakura
    phone_number: 972-248-1190
  function: UpdatePassengerInformation
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 854ef37b-bb29-4813-8f08-7241d7f6e646
  skip: []
- function: UpdatePassengerInformation
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: b1adbb70-fc60-49d4-9de8-b1cd77b90920
  parameters:
  - passenger_id
- content: We have noted your new name as Emily Sakura, phone number as 972-248-1190,
    and loyalty program as ANA Mileage Club. The provided passenger ID, TK0089, is
    invalid. Please enter a valid passenger ID. Additionally, please enter your new
    email address.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 67e3a1ae-9924-431e-9ca2-a5e0aafbb149
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 67e3a1ae-9924-431e-9ca2-a5e0aafbb149
  next_node: routing_node
- content: My actual passenger ID is TK0098, and my new email address is emily.sakura@gmail.com.
  kind: user
  metadata:
    agent: ''
    id: 43044b22-348e-4b87-8e5c-a290398942d3
    node: ''
    other:
      alias: multislot_instruct3a
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: b55e79cb-8818-42ef-a607-6eac1ec206ce
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 448c7a60-3280-4805-928b-6d2d53e66e8d
  next_node: gather_values_node
- function: UpdatePassengerInformation
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 6527937c-0b35-4932-9d68-a141eb0cfa19
  parameters:
    email: emily.sakura@gmail.com
    passenger_id: TK0098
- function: UpdatePassengerInformation
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 6a867500-800c-47f8-a42b-42e0d098edcd
  parameters:
    email:
      explanation: ''
      status: valid
      value: emily.sakura@gmail.com
    passenger_id:
      explanation: The value should be an integer.
      status: invalid
      value: TK0098
- assign:
    email: emily.sakura@gmail.com
  function: UpdatePassengerInformation
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 8c408c11-e8c1-48d8-887c-9171d75e0a6c
  skip: []
- function: UpdatePassengerInformation
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 8c408c11-e8c1-48d8-887c-9171d75e0a6c
  parameter: passenger_id
  parameter_value: TK0098
- function: UpdatePassengerInformation
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: ce788ed4-7e9c-4ea2-be7f-9771b1df3f97
  parameters:
  - passenger_id
- content: Noted, the new email address is set to emily.sakura@gmail.com. Unfortunately,
    the value provided for passenger ID, TK0098, is still invalid. Please enter a
    valid passenger ID.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 8138fefe-7103-4db9-ba58-bfa22c2b479d
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 8138fefe-7103-4db9-ba58-bfa22c2b479d
  next_node: routing_node
- content: My actual passenger ID is TK0112.
  kind: user
  metadata:
    agent: ''
    id: 189b44a9-08f0-4de9-8d66-976462ea9308
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 81d2a00a-2ed4-4b0a-b442-2d68cecbfa0e
  error: null
  id: 57a5ed74-233a-4dbf-95f0-0359ef15e2b1
  last_agent_tape_id: e8939918-72f7-4c80-b330-3bb739297518
  n_added_steps: 1
  other: {}
  parent_id: e8939918-72f7-4c80-b330-3bb739297518
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I need to add a travel insurance to my existing flight booking.
  kind: user
  metadata:
    agent: ''
    id: b6c45f71-5184-4af3-bb28-12758b0f15c5
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 935c4ac7-d91a-4309-8165-8c2a7dc264ad
  query: I need to add a travel insurance to my existing flight booking.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: AddAncillaryService
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 05e8da59-cee0-472f-8424-da636c6b4ba3
- description: Request to add an ancillary service to a flight booking, including
    service type and payment details. This function requires the flight booking ID,
    service type (either 'baggage' or'meal'), and payment method (either 'credit card'
    or 'cash'). According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. If the service is successfully added, the function returns
    a request ID, the status of the request ('pending', 'approved', or'rejected'),
    and a list of the updated services associated with the flight booking. If the
    service is already added, the function returns an error message.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: AddAncillaryService
  parameters:
    properties:
      flight_booking_id:
        description: The ID of the flight booking.
        type: integer
      payment_method:
        description: The payment method.
        enum:
        - credit card
        - cash
        type: string
      service_type:
        description: The type of ancillary service.
        enum:
        - baggage
        - meal
        type: string
      special_instructions:
        description: Any special instructions for the ancillary service.
        type: string
    required:
    - flight_booking_id
    - service_type
    - payment_method
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the request.
        type: string
      status:
        description: The status of the request.
        enum:
        - pending
        - approved
        - rejected
        type: string
      updated_services:
        description: The list of updated services associated with the flight booking.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    - updated_services
    type: object
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 734dae6a-2801-47d5-abf0-4922e5cb9ca6
  parameters:
    service_type: travel insurance
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 2753ceac-396a-4e50-b8ea-f923e5050bbf
  parameters:
    service_type:
      explanation: Only 'baggage' or 'meal' are allowed.
      status: invalid
      value: travel insurance
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 1ae083a2-e4b8-4fba-8193-ee84c2c5fd0f
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 1ae083a2-e4b8-4fba-8193-ee84c2c5fd0f
  parameter: service_type
  parameter_value: travel insurance
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 9a281150-3b49-4077-bcff-5d11abe6f939
  parameters:
  - service_type
- content: Unfortunately, the ancillary service type 'travel insurance' is invalid.
    The valid types are 'baggage' or 'meal'. Please enter the type of ancillary service
    you want to add to your flight booking. The valid types are 'baggage' or 'meal'.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: ae3dd350-51a8-4032-8ebc-87ed74df0624
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: ae3dd350-51a8-4032-8ebc-87ed74df0624
  next_node: routing_node
- content: I'd like to add both baggage and meal services to my flight booking.
  kind: user
  metadata:
    agent: ''
    id: a9ba75cc-6a80-4dd5-b9e1-6150db920641
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: f54a1442-4828-49c4-8e20-8aca03843937
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 7ca57945-fede-4424-81be-f1e6ab5974c6
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 001d6c0d-78e8-43cf-ae4f-f6fb58086285
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: bac796b0-38fc-4260-acdd-eb7e66ec0936
  parameters:
    service_type:
      explanation: only one ancillary service can be added per flight booking.
      status: invalid
      value: both baggage and meal
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 3aa6540f-256b-44f8-a742-42c867f7ab5f
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 3aa6540f-256b-44f8-a742-42c867f7ab5f
  parameter: service_type
  parameter_value: both baggage and meal
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 3eb67b79-ac23-4ec7-83eb-ad9f1ef41cb8
  parameters:
  - service_type
- content: Unfortunately, you can only add one ancillary service per flight booking.
    Adding both baggage and meal services at once is not possible. Please enter one
    type of ancillary service you want to add to your flight booking. The valid types
    are 'baggage' or 'meal'.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 7cf55194-74e6-415e-bdc5-477bf7825e9a
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 7cf55194-74e6-415e-bdc5-477bf7825e9a
  next_node: routing_node
- content: I want to add baggage and then also meal services.
  kind: user
  metadata:
    agent: ''
    id: 07dd019f-6c82-4506-960b-86b7e3ecb360
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: a00f82ee-c889-4bd4-9acb-859e228f283f
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 9352a611-5055-4c4f-bd6d-10bc5478544d
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: d5583d36-dbca-490e-9c05-dfbe810e6d7d
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 402eb00d-37c4-48ef-8c3c-ac08575482e8
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: bf1eb1a6-6013-4930-82ad-af10c8309df7
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: bf1eb1a6-6013-4930-82ad-af10c8309df7
  parameter: service_type
  parameter_value: missing
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 0709f89e-fd5b-449c-8744-25f3a3fe30d8
  parameters:
  - service_type
- content: I understand that you want to add both baggage and meal services, but I
    need to remind you that you can only add one ancillary service per flight booking.
    You did not enter one type of ancillary service to add. The service type is missing.
    Please enter one type of ancillary service you want to add to your flight booking.
    The valid types are 'baggage' or 'meal'.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 120bab55-189b-4426-8025-834e5940b44a
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 120bab55-189b-4426-8025-834e5940b44a
  next_node: routing_node
- content: Baggage
  kind: user
  metadata:
    agent: ''
    id: 308fb056-aa41-47bb-88c2-2a5a078f5d35
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: dabaf9bc-3b56-4322-baa2-01e0a46d2ead
  error: null
  id: 3581c740-324b-451f-a35d-0706022d7437
  last_agent_tape_id: 432e37d6-8a48-46d2-b25f-ea7036c799ed
  n_added_steps: 1
  other: {}
  parent_id: 432e37d6-8a48-46d2-b25f-ea7036c799ed
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to add travel insurance to my existing flight booking.
  kind: user
  metadata:
    agent: ''
    id: 8da6423a-a1b6-4841-9497-752b7f069c55
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: e734b5ec-6f6c-41bf-a53f-620ec8d04b4b
  query: I want to add travel insurance to my existing flight booking.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: AddAncillaryService
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: aa58f171-1a9f-4412-908c-bb52ffc59951
- description: Request to add an ancillary service to a flight booking, including
    service type and payment details. This function requires the flight booking ID,
    service type (either 'baggage' or'meal'), and payment method (either 'credit card'
    or 'cash'). According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. If the service is successfully added, the function returns
    a request ID, the status of the request ('pending', 'approved', or'rejected'),
    and a list of the updated services associated with the flight booking. If the
    service is already added, the function returns an error message.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: AddAncillaryService
  parameters:
    properties:
      flight_booking_id:
        description: The ID of the flight booking.
        type: integer
      payment_method:
        description: The payment method.
        enum:
        - credit card
        - cash
        type: string
      service_type:
        description: The type of ancillary service.
        enum:
        - baggage
        - meal
        type: string
      special_instructions:
        description: Any special instructions for the ancillary service.
        type: string
    required:
    - flight_booking_id
    - service_type
    - payment_method
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the request.
        type: string
      status:
        description: The status of the request.
        enum:
        - pending
        - approved
        - rejected
        type: string
      updated_services:
        description: The list of updated services associated with the flight booking.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    - updated_services
    type: object
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: cf328e82-333b-47bc-88e3-ca540e30682b
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 71239c50-5f67-453f-b7cb-5a89a7aa4939
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 2955d25d-67b1-4c16-8887-8f7bf7cd0134
  skip: []
- kind: refuse_to_engage_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 2955d25d-67b1-4c16-8887-8f7bf7cd0134
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 9bf40a43-d750-4194-96c7-fc9a6b9d1448
  parameters:
  - service_type
- content: I can help you add either baggage or meal to your flight booking. Please
    enter the type of service you would like to add (baggage or meal).
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 74456f51-1bd9-4c47-973a-54ee52a824c3
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 74456f51-1bd9-4c47-973a-54ee52a824c3
  next_node: routing_node
- content: I want to add both baggage and meal insurance to my existing flight booking.
    Can you help me with travel insurance instead?
  kind: user
  metadata:
    agent: ''
    id: c3f1c1e7-9350-4f1d-953c-837318abc78a
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 46d4575d-3b82-4766-bdba-4301edf02cbf
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 762c159f-c3fc-449c-9b00-56bd117cbf9d
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: dc2c7066-349f-4b31-85f9-677d858a1ce5
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: a6c0ad6f-168a-4147-bf64-3fd45e8b29da
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a8d3d25e-5314-494f-aca3-6948d1c58d94
  skip: []
- declined_questions:
  - Can you help me with travel insurance instead?
  function: AddAncillaryService
  kind: no_answer_in_function_schema_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a8d3d25e-5314-494f-aca3-6948d1c58d94
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a8d3d25e-5314-494f-aca3-6948d1c58d94
  parameter: service_type
  parameter_value: both baggage and meal insurance
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: d00a9c82-6d5d-437e-8863-cd52729fcd75
  parameters:
  - service_type
- content: Unfortunately, adding both baggage and meal insurance simultaneously is
    not possible. Also, travel insurance is not a service we provide. The value you
    provided for the service type, 'both baggage and meal insurance', is invalid.
    Please enter the type of service you would like to add (baggage or meal).
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: c28e5722-9eac-43b2-b3ff-e705798ebc24
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: c28e5722-9eac-43b2-b3ff-e705798ebc24
  next_node: routing_node
- content: I'd like to add baggage and also meal, can I add both?
  kind: user
  metadata:
    agent: ''
    id: 946a9ee6-9553-416a-9973-aea3106dcf35
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 39dcc028-4e5a-44b0-9388-9bc6566bc0eb
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 52a7a3de-13a7-4230-8f09-69d5a2ecf2f2
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: e46668a8-4329-443c-8fcc-55916ea26b22
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 75005a49-732a-429c-b434-c631626cbba6
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 0cbe086c-42b8-459e-b340-06ad433bce25
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 0cbe086c-42b8-459e-b340-06ad433bce25
  parameter: service_type
  parameter_value: both
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 240278ff-4ea5-459e-bdbc-a112ae5f59a0
  parameters:
  - service_type
- content: As I mentioned earlier, adding both baggage and meal insurance is not possible.
    Please enter one type of service you would like to add (either baggage or meal).
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 06f7324b-797f-4603-bd33-77fdfe57d3f5
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 06f7324b-797f-4603-bd33-77fdfe57d3f5
  next_node: routing_node
- content: I'd like to speak with a supervisor because I want to add travel insurance
    to protect against unforeseen circumstances such as trip cancellations or interruptions,
    and I believe it is essential for my flight booking, but it seems like that option
    isn't available here.
  kind: user
  metadata:
    agent: ''
    id: 3c3bbebf-0f82-4a0f-a556-54d7fd83b4b9
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 426718bc-8dd1-402e-9968-d4e1ab441b9f
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 7a4fca75-6df4-48c2-815a-bdf0d23f362d
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: acb4f524-2123-4f10-8501-22d5939952cb
  parameters:
    special_instructions: I want to add travel insurance to protect against unforeseen
      circumstances such as trip cancellations or interruptions, and I believe it
      is essential for my flight booking, but it seems like that option isn't available
      here.
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 2a0eb7ae-2d2b-4581-a595-a6c681f75e93
  parameters:
    special_instructions:
      explanation: ''
      status: valid
      value: I want to add travel insurance to protect against unforeseen circumstances
        such as trip cancellations or interruptions, and I believe it is essential
        for my flight booking, but it seems like that option isn't available here.
- assign:
    special_instructions: I want to add travel insurance to protect against unforeseen
      circumstances such as trip cancellations or interruptions, and I believe it
      is essential for my flight booking, but it seems like that option isn't available
      here.
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 713de1c9-0a43-4547-8b25-3382092fb385
  skip: []
- declined_questions:
  - How can I add travel insurance?
  function: AddAncillaryService
  kind: no_answer_in_function_schema_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 713de1c9-0a43-4547-8b25-3382092fb385
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 193964aa-bdf3-447a-b160-64ef7f7ac717
  parameters:
  - service_type
- content: I noted your special instruction that you want to add travel insurance
    to protect against unforeseen circumstances such as trip cancellations or interruptions,
    and you believe it is essential for your flight booking, but it seems like that
    option isn't available here. Unfortunately, travel insurance is not an option
    we provide. Please choose the type of service you would like to add, which can
    be either baggage or meal.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 16217714-f085-45c2-9278-d758bef10c7c
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 16217714-f085-45c2-9278-d758bef10c7c
  next_node: routing_node
- content: I still want to purchase full travel insurance to cover unforeseen events
    such as trip cancellations, interruptions, and medical emergencies.
  kind: user
  metadata:
    agent: ''
    id: ef3dc131-4427-4b08-8510-e1bd0570c6ed
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 6220bc55-af28-43c4-8809-981a17e14a43
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: de84326c-c49c-443c-b408-052f01464481
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: ffd7cccc-f8d6-472b-b121-3f9f96543ed7
  parameters:
    special_instructions: I want to purchase full travel insurance to cover unforeseen
      events such as trip cancellations, interruptions, and medical emergencies.
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 8f2c9d1b-6504-4941-8454-a2985a2a3428
  parameters:
    special_instructions:
      explanation: Special instructions does not help select valid service type which
        can only be baggage or meal.
      status: invalid
      value: I want to purchase full travel insurance to cover unforeseen events such
        as trip cancellations, interruptions, and medical emergencies.
- assign:
    special_instructions: I want to purchase full travel insurance to cover unforeseen
      events such as trip cancellations, interruptions, and medical emergencies.
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 48292569-38d5-4526-bc29-14ee1060b942
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 48292569-38d5-4526-bc29-14ee1060b942
  parameter: service_type
  parameter_value: null
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 304c85b5-59de-481e-8b38-749122236e0b
  parameters:
  - service_type
- content: Noted, your special instruction is 'I want to purchase full travel insurance
    to cover unforeseen events such as trip cancellations, interruptions, and medical
    emergencies.' Unfortunately, travel insurance is not a valid option for the service
    type. As mentioned before, the value you provided for the service type is invalid.
    Please enter the type of service you would like to add (baggage or meal).
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: a9ad2d7d-f83c-47b0-a4de-173f33b99d20
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: a9ad2d7d-f83c-47b0-a4de-173f33b99d20
  next_node: routing_node
- content: I want to speak with a supervisor.
  kind: user
  metadata:
    agent: ''
    id: 601728e2-68a0-454a-9294-48dbcff3e2b8
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 3e87457c-e656-4e41-8441-be33c21cd76c
  error: null
  id: 563b89c3-e1c4-4998-9832-e241527ab276
  last_agent_tape_id: e1c67ebe-7e91-4706-ad3c-5d66df75eef2
  n_added_steps: 1
  other: {}
  parent_id: e1c67ebe-7e91-4706-ad3c-5d66df75eef2
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to add a travel insurance to my existing flight booking, can you
    help me with that?
  kind: user
  metadata:
    agent: ''
    id: 53aa8503-2277-4381-bf64-6f66d1b2cad0
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: d4bff724-7160-4061-8333-0b9997f6017c
  query: I want to add a travel insurance to my existing flight booking, can you help
    me with that?
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: AddAncillaryService
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: bdd623b4-39a7-4ce7-a245-8e05981ffcfd
- description: Request to add an ancillary service to a flight booking, including
    service type and payment details. This function requires the flight booking ID,
    service type (either 'baggage' or'meal'), and payment method (either 'credit card'
    or 'cash'). According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. If the service is successfully added, the function returns
    a request ID, the status of the request ('pending', 'approved', or'rejected'),
    and a list of the updated services associated with the flight booking. If the
    service is already added, the function returns an error message.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: AddAncillaryService
  parameters:
    properties:
      flight_booking_id:
        description: The ID of the flight booking.
        type: integer
      payment_method:
        description: The payment method.
        enum:
        - credit card
        - cash
        type: string
      service_type:
        description: The type of ancillary service.
        enum:
        - baggage
        - meal
        type: string
      special_instructions:
        description: Any special instructions for the ancillary service.
        type: string
    required:
    - flight_booking_id
    - service_type
    - payment_method
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the request.
        type: string
      status:
        description: The status of the request.
        enum:
        - pending
        - approved
        - rejected
        type: string
      updated_services:
        description: The list of updated services associated with the flight booking.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    - updated_services
    type: object
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: ac27c443-8d95-4dfc-b193-c99b85c6546f
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 0e114bb5-cb66-4e76-8141-e851a4f795fc
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a0db48d6-aada-4cb8-a20b-fbc51ecf7040
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a0db48d6-aada-4cb8-a20b-fbc51ecf7040
  parameter: service_type
  parameter_value: travel insurance
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 4c31de4d-2f8f-47a1-abdd-4442ca524827
  parameters:
  - service_type
- content: Unfortunately, we do not support travel insurance as an ancillary service.
    The allowed ancillary services are baggage and meal. Please enter the service
    type that you want to add to your existing flight booking, either baggage or meal.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 70cb892a-cdce-4525-91a8-02e87c481898
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 70cb892a-cdce-4525-91a8-02e87c481898
  next_node: routing_node
- content: Seat selection
  kind: user
  metadata:
    agent: ''
    id: e460d46c-8f5a-4f81-9fe0-d767fdce62e9
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 4b8e4b8b-2f98-4460-b8d3-067fa18d1c5d
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 8c65cd80-9281-4069-af00-647b24ebbb65
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 0c05329a-9dc0-4808-9c12-c780191df73c
  parameters:
    service_type: Seat selection
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 319f70b6-1079-413e-92e4-c9b65fd7338e
  parameters:
    service_type:
      explanation: Allowed values are 'baggage' and 'meal'.
      status: invalid
      value: Seat selection
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 9a77c31d-d72c-4672-ab3c-2a39fd5328ab
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 9a77c31d-d72c-4672-ab3c-2a39fd5328ab
  parameter: service_type
  parameter_value: Seat selection
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 15102a9e-a061-4042-8097-0fe029def2ea
  parameters:
  - service_type
- content: The value provided for service type, Seat selection, is not allowed. Please
    enter the service type that you want to add to your existing flight booking, either
    baggage or meal.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: ee1cb133-9392-488c-862c-57df6d4d015b
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: ee1cb133-9392-488c-862c-57df6d4d015b
  next_node: routing_node
- content: Can I please just skip this question and talk to a supervisor?
  kind: user
  metadata:
    agent: ''
    id: 94864dcd-1d21-4ba8-aafa-a72469f75765
    node: ''
    other:
      alias: skip_required
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 57f3172a-fab3-4502-9f15-620ae35da3b7
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 15d917b4-caa3-4bc1-9256-34291860fc67
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 260fb43e-3e3b-41ef-a3fc-c6be8916122a
  parameters:
    service_type: <|skip|>
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: b4385e84-b71f-4ec8-8672-bccee884c4b5
  parameters:
    service_type:
      explanation: Service type is a required field and cannot be skipped.
      status: invalid
      value: <|skip|>
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: fccfd90f-e11e-4576-8da7-5eb957160236
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_skip_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: fccfd90f-e11e-4576-8da7-5eb957160236
  parameter: service_type
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: e1cbaf30-a3bc-4e77-a160-e90a8a6c59e3
  parameters:
  - service_type
- content: I'm afraid you cannot skip the service type. Please enter the service type
    that you want to add to your existing flight booking, either baggage or meal.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: a3d68d0d-776a-4397-9bf2-5943bf59c195
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: a3d68d0d-776a-4397-9bf2-5943bf59c195
  next_node: routing_node
- content: I'd like to add a meal, I'll be paying with my Visa card, and can you please
    make sure the meal is gluten-free.
  kind: user
  metadata:
    agent: ''
    id: 679295e5-822c-408c-ac76-dffb8dcc3fbb
    node: ''
    other:
      alias: multislot_instruct3b
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 62e1c83e-9f2e-4271-b6b9-7c5f2c2b8254
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 37af42ab-80ed-4d20-a7c2-ce02d9514f59
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: f8b3375a-a608-4989-953b-6cc0100c8614
  parameters:
    payment_method: credit card
    service_type: meal
    special_instructions: gluten-free
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 685bb1aa-5bc0-4798-a273-44cfd84743d1
  parameters:
    payment_method:
      explanation: Inferred to be a type of 'credit card'.
      status: valid
      value: credit card
    service_type:
      explanation: ''
      status: valid
      value: meal
    special_instructions:
      explanation: ''
      status: valid
      value: gluten-free
- assign:
    payment_method: credit card
    service_type: meal
    special_instructions: gluten-free
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 967dedbc-b723-43a8-b940-f0995ab362ac
  skip: []
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 6bba0165-0717-40a8-8c48-7f453131f8e9
  parameters:
  - flight_booking_id
- content: Noted, the service type is set to meal, the payment method is set to credit
    card, and the special instructions are gluten-free. Please enter the ID of your
    flight booking.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: f66ad709-2bee-4579-9f29-90b42b0f0951
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: f66ad709-2bee-4579-9f29-90b42b0f0951
  next_node: routing_node
- content: Can multiple ancillary services be added to one flight booking?
  kind: user
  metadata:
    agent: ''
    id: bc418d94-b8e9-4d58-a80f-877b2d487c5e
    node: ''
    other:
      alias: ask_about_docs
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 97191ce7-a58c-49c9-8eac-f16986fdb865
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: ee46b2e7-fff0-4611-abe6-c5c86beefcc5
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 3bef2712-60cd-47a5-9d14-7a26b4373e87
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 7250d1f4-e4fc-4a5e-bb89-0815442aad42
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 96aba597-259b-44ad-a5cd-752849d6346c
  skip: []
- answerable_questions:
  - Can multiple ancillary services be added to one flight booking?
  function: AddAncillaryService
  kind: answer_from_function_schema_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 96aba597-259b-44ad-a5cd-752849d6346c
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 9f635986-3e38-482b-b90f-99c5a62af25f
  parameters:
  - flight_booking_id
- content: According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. Please enter the ID of your flight booking.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3e0ab6b1-cd29-45e1-a729-a563169b77d3
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3e0ab6b1-cd29-45e1-a729-a563169b77d3
  next_node: routing_node
- content: FB001234
  kind: user
  metadata:
    agent: ''
    id: edd60bc1-6e23-4c2c-93f7-bb15ce68d063
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: e28ce27d-02c9-4640-83f9-94f05f76d211
  error: null
  id: 24fc75c9-2720-4009-b435-3b0a1dba7c7c
  last_agent_tape_id: 54982db9-9db4-49ef-b320-2a9c796a0afb
  n_added_steps: 1
  other: {}
  parent_id: 54982db9-9db4-49ef-b320-2a9c796a0afb
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I want to add travel insurance to my existing flight booking.
  kind: user
  metadata:
    agent: ''
    id: 8da6423a-a1b6-4841-9497-752b7f069c55
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: e734b5ec-6f6c-41bf-a53f-620ec8d04b4b
  query: I want to add travel insurance to my existing flight booking.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: AddAncillaryService
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: aa58f171-1a9f-4412-908c-bb52ffc59951
- description: Request to add an ancillary service to a flight booking, including
    service type and payment details. This function requires the flight booking ID,
    service type (either 'baggage' or'meal'), and payment method (either 'credit card'
    or 'cash'). According to FlyCorp's policy, only one ancillary service can be added
    per flight booking. If the service is successfully added, the function returns
    a request ID, the status of the request ('pending', 'approved', or'rejected'),
    and a list of the updated services associated with the flight booking. If the
    service is already added, the function returns an error message.
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: AddAncillaryService
  parameters:
    properties:
      flight_booking_id:
        description: The ID of the flight booking.
        type: integer
      payment_method:
        description: The payment method.
        enum:
        - credit card
        - cash
        type: string
      service_type:
        description: The type of ancillary service.
        enum:
        - baggage
        - meal
        type: string
      special_instructions:
        description: Any special instructions for the ancillary service.
        type: string
    required:
    - flight_booking_id
    - service_type
    - payment_method
    type: object
  return_value:
    properties:
      request_id:
        description: The ID of the request.
        type: string
      status:
        description: The status of the request.
        enum:
        - pending
        - approved
        - rejected
        type: string
      updated_services:
        description: The list of updated services associated with the flight booking.
        items:
          type: string
        type: array
    required:
    - request_id
    - status
    - updated_services
    type: object
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: cf328e82-333b-47bc-88e3-ca540e30682b
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 71239c50-5f67-453f-b7cb-5a89a7aa4939
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 2955d25d-67b1-4c16-8887-8f7bf7cd0134
  skip: []
- kind: refuse_to_engage_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 2955d25d-67b1-4c16-8887-8f7bf7cd0134
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 9bf40a43-d750-4194-96c7-fc9a6b9d1448
  parameters:
  - service_type
- content: I can help you add either baggage or meal to your flight booking. Please
    enter the type of service you would like to add (baggage or meal).
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 74456f51-1bd9-4c47-973a-54ee52a824c3
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 74456f51-1bd9-4c47-973a-54ee52a824c3
  next_node: routing_node
- content: I would like to add baggage and meal.
  kind: user
  metadata:
    agent: ''
    id: 4260e1b2-7f42-41cb-97cd-e5d5061ad2c8
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: b296e8b9-f237-49cd-ae1e-a3de2e1fe952
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 62afbdd4-d428-4719-b450-cf9f55c1a7af
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 06d1ead9-7f91-4e6f-9e56-8bc57474258a
  parameters:
    service_type: baggage and meal
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 761cfa22-9199-4eab-bfeb-4e0573d0e901
  parameters:
    service_type:
      explanation: Only one type of service can be added per flight booking, which
        should be either 'baggage' or 'meal'.
      status: invalid
      value: baggage and meal
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a606906a-171a-408b-9d64-2ce4e091d496
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a606906a-171a-408b-9d64-2ce4e091d496
  parameter: service_type
  parameter_value: null
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: ed5aa87f-6270-4deb-afd7-05394bd11fe8
  parameters:
  - service_type
- content: The service type you provided, 'baggage and meal', is invalid. You can
    only add either 'baggage' or 'meal' to your flight booking. Please enter the correct
    type of service you would like to add.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 90024072-5856-4a04-9224-602947b4b553
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 90024072-5856-4a04-9224-602947b4b553
  next_node: routing_node
- content: Travel insurance
  kind: user
  metadata:
    agent: ''
    id: f8eefab4-2aa3-4342-a25b-ac36d969e53f
    node: ''
    other:
      alias: invalid_value_3
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 5967f2bc-de7e-4cd9-a385-aff8805ff6bb
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: ebad7235-e1eb-43d3-8e10-5f293fe08747
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 0555532e-55df-4072-b931-5ce0fed8c303
  parameters:
    service_type: Travel insurance
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: e4bd3933-8961-4d76-9c50-2cd97cc78ea5
  parameters:
    service_type:
      explanation: The value should be either 'baggage' or 'meal'.
      status: invalid
      value: Travel insurance
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 4bb04e8c-eeed-4adb-8371-667a0884fb1a
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 4bb04e8c-eeed-4adb-8371-667a0884fb1a
  parameter: service_type
  parameter_value: null
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 3c712c75-e26d-4f12-a216-1c78d8ee94dc
  parameters:
  - service_type
- content: You can only add either 'baggage' or 'meal' to your flight booking. Please
    enter the correct type of service you would like to add.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 81a7f3e1-6f58-4b93-a9d2-9b72a469d23a
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 81a7f3e1-6f58-4b93-a9d2-9b72a469d23a
  next_node: routing_node
- content: I want to add baggage to my flight, also please note that I am a vegetarian,
    I will pay by Visa, and this is for my upcoming trip to Tokyo with booking reference
    FB0098765.
  kind: user
  metadata:
    agent: ''
    id: 37e2fb37-d1c1-4b95-b632-07bce86161b6
    node: ''
    other:
      alias: multislot_instruct3c
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 4a7f5514-37ce-4a2a-b85f-4c698939b9c6
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 38e694c8-8420-4a14-98c3-a784fc4bcc56
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 5ce10356-d01e-4cf0-bbfd-2700e7f2f7df
  parameters:
    flight_booking_id: FB0098765
    payment_method: credit card
    service_type: baggage
    special_instructions: vegetarian
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 95924753-476e-40f0-a520-cb1c4d4bfda8
  parameters:
    flight_booking_id:
      explanation: The value should be an integer.
      status: invalid
      value: FB0098765
    payment_method:
      explanation: '''Visa'' is a type of ''credit card''.'
      status: valid
      value: credit card
    service_type:
      explanation: ''
      status: valid
      value: baggage
    special_instructions:
      explanation: ''
      status: valid
      value: vegetarian
- assign:
    payment_method: credit card
    service_type: baggage
    special_instructions: vegetarian
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 1ed1f544-1518-4b15-9bd7-3bc9691a9a44
  skip: []
- function: AddAncillaryService
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 1ed1f544-1518-4b15-9bd7-3bc9691a9a44
  parameter: flight_booking_id
  parameter_value: FB0098765
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 52d867df-650e-46d0-9c1e-1df3668bfd30
  parameters:
  - flight_booking_id
- content: Noted, you want to add baggage to your flight. You have also mentioned
    that you are a vegetarian and you will pay by credit card. However, I need you
    to enter the flight booking ID in the correct format as the provided ID, FB0098765,
    is not a valid integer.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: f5f23473-6909-4c33-a78f-b403ea42cec4
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: f5f23473-6909-4c33-a78f-b403ea42cec4
  next_node: routing_node
- content: What is the maximum number of ancillary services I can add to my existing
    flight booking?
  kind: user
  metadata:
    agent: ''
    id: 8c30050a-17db-4939-a47f-a0cc54363044
    node: ''
    other:
      alias: ask_about_docs
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 272bbe43-8cd0-4123-b535-d125ac074b75
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 5197084c-1db1-46af-a504-d789e751823e
  next_node: gather_values_node
- function: AddAncillaryService
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: a77dd978-21ff-4576-a447-6a6455313ea6
  parameters: {}
- function: AddAncillaryService
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 04b38aee-13b6-40b0-9e8f-7cf20e8a0028
  parameters: {}
- assign: {}
  function: AddAncillaryService
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a6168255-5d28-4af4-94e6-3df18aeca11d
  skip: []
- answerable_questions:
  - What is the maximum number of ancillary services I can add to my existing flight
    booking?
  function: AddAncillaryService
  kind: answer_from_function_schema_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: a6168255-5d28-4af4-94e6-3df18aeca11d
- function: AddAncillaryService
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: df098602-c04c-45c5-bb8c-9583f65c23c3
  parameters:
  - flight_booking_id
- content: You can only add one ancillary service per flight booking. To add baggage
    to your flight, please enter your flight booking ID as an integer number.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 910561f2-67e4-4136-a09a-7404a5545860
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 910561f2-67e4-4136-a09a-7404a5545860
  next_node: routing_node
- content: My flight booking ID is 98765.
  kind: user
  metadata:
    agent: ''
    id: 9ce86cc6-3c57-4363-b2c8-7627c967814e
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
---
context:
  date: '2024-12-02'
  env_spec: examples/form_filler/assets/forms/train/FlyCorp
metadata:
  author: user_simulator
  author_tape_id: 4a8ae60b-8cb0-4131-b7be-3a6dcb950fa3
  error: null
  id: 7b5c7f2d-dea2-4e3f-ba24-be64860fe85c
  last_agent_tape_id: dfd01ea8-f23e-463e-90c1-89cc982e7c52
  n_added_steps: 1
  other: {}
  parent_id: dfd01ea8-f23e-463e-90c1-89cc982e7c52
  result: {}
  user_behavior: test_behavior
  user_secondary_behavior: default_instruction
steps:
- content: Hi, how can I help you?
  kind: assistant
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- content: I need to report my luggage missing since it didn't show up on the baggage
    claim after my flight.
  kind: user
  metadata:
    agent: ''
    id: 0aacb75f-8db4-4655-b663-ea74b35ea1c3
    node: ''
    other:
      alias: init_message_short
    prompt_id: ''
- kind: resolve_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: d822d9d3-64ca-4cd1-9c89-f490ad6af62f
  query: I need to report my luggage missing since it didn't show up on the baggage
    claim after my flight.
- candidates:
  - function: AddAncillaryService
    short_description: Request to add an ancillary service to a flight booking, including
      service type and payment details. This function requires the flight booking
      ID, service type (either 'baggage' or'meal'), and payment method (either 'credit
      card' or 'cash'). According to FlyCorp's policy, only one ancillary service
      can be added per flight booking. If the service is successfully added, the function
      returns a request ID, the status of the request ('pending', 'approved', or'rejected'),
      and a list of the updated services associated with the flight booking. If the
      service is already added, the function returns an error message.
  - function: BookFlight
    short_description: Request to book a flight for a passenger, including flight
      details, passenger information, and payment details. This function requires
      the passenger's first and last name, email address, phone number, and payment
      method. The flight details include the departure and arrival airports, departure
      date, and class of service. According to FlyCorp's policies, passengers must
      be at least 18 years old to book a flight, and payment must be made using a
      valid credit card. The function returns a request ID, the status of the request
      (either 'pending', 'approved', or'rejected'), and a list of flight details.
  - function: CheckIn
    short_description: Request to check-in a passenger for a flight, including seat
      selection and baggage information. This function requires the passenger's booking
      reference, flight number, and last name as mandatory parameters. Optionally,
      the passenger can provide their preferred seat and baggage details. According
      to FlyCorp's check-in policy, online check-in is available 24 hours prior to
      the scheduled flight departure time. FlyCorp's baggage policy allows each passenger
      to check-in up to two bags, with a maximum weight of 23kg each. The function
      returns a unique request ID, the status of the check-in request (either'success'
      or 'failed'), and a list of checked-in baggage items.
  - function: ReportLostLuggage
    short_description: 'Request to report lost luggage, including flight details,
      luggage description, and contact information. This function requires the passenger''s
      name, flight number, departure date, luggage type, and contact email. The luggage
      type must be one of the following: suitcase, backpack, handbag, or other. The
      function will return a request ID, the status of the request (either ''pending'',
      ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
      team. According to FlyCorp''s policy, all lost luggage reports must be submitted
      within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
      that is not reported within this timeframe.'
  - function: RequestFlightChange
    short_description: Request to change a flight, including original flight details
      (original flight number, departure date, and departure time), new flight details
      (new flight number, new departure date, and new departure time), and reason
      for change. This request is subject to FlyCorp's flight change policy, which
      allows changes up to 24 hours prior to the original flight's scheduled departure
      time. The request will be processed based on availability and may incur additional
      fees. The response will include a unique request ID, the status of the request
      (approved, denied, or pending), and a list of updated flight segments.
  - function: RequestRefund
    short_description: 'Request for a refund for a cancelled or changed flight, including
      flight details and reason for refund. This function requires the flight number,
      original booking date, and reason for refund as mandatory parameters. The reason
      for refund must be one of the following: ''flight cancellation'',''schedule
      change'', or ''voluntary change''. FlyCorp''s refund policy states that refunds
      will be processed within 7-10 business days. The function returns a unique request
      ID, the status of the request (either ''pending'', ''approved'', or''rejected''),
      and a list of comments from the FlyCorp customer service team.'
  - function: RequestSpecialMeal
    short_description: Request for a special meal option for a passenger, including
      meal type and dietary restrictions. This function requires the passenger's booking
      reference, meal type (vegetarian, gluten-free, etc.), and dietary restrictions
      (halal, kosher, etc.). According to FlyCorp's policy, special meal requests
      must be made at least 24 hours prior to flight departure. The function will
      return a request ID, the status of the request (approved, denied, or pending),
      and a comment indicating any additional information or requirements.
  - function: RequestWheelchairAssistance
    short_description: Request for wheelchair assistance for a passenger, including
      flight details and special requirements. This function requires the passenger's
      name, flight number, and departure date as mandatory parameters. Additionally,
      it accepts optional parameters for special requirements such as escort assistance
      or Braille signage. According to FlyCorp's policy, wheelchair assistance requests
      must be made at least 48 hours prior to the scheduled flight departure time.
      The function returns a unique request ID, the status of the request (either
      'pending', 'approved', or 'denied'), and a list of assigned assistants.
  - function: UpdatePassengerInformation
    short_description: Request to update a passenger's personal information, including
      name, contact details, and loyalty program information. This function requires
      the passenger's ID, new name, email address, and phone number as mandatory parameters.
      The loyalty program information is optional. According to FlyCorp's policy,
      passengers can only update their own information, and the new email address
      must not be already in use by another passenger. The function returns a request
      ID, the status of the request (either'success' or 'failed'), and a list of updated
      loyalty programs.
  - function: UpdateSeatAssignment
    short_description: Request to update a passenger's seat assignment on a flight,
      including seat number and class of service. This function requires the passenger's
      booking reference, flight number, and new seat assignment details. According
      to FlyCorp's policies, seat assignments can only be updated up to 24 hours prior
      to the scheduled flight departure time. Additionally, FlyCorp's rules dictate
      that passengers in Basic Economy class are not eligible for seat selection.
      The function returns a request ID, the status of the request (either'success'
      or 'failed'), and a list of available seats on the flight.
  kind: function_candidates
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
- function: ReportLostLuggage
  kind: inspect_function_action
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 1174002f-82cc-4eb7-9739-dca8378b1477
- description: 'Request to report lost luggage, including flight details, luggage
    description, and contact information. This function requires the passenger''s
    name, flight number, departure date, luggage type, and contact email. The luggage
    type must be one of the following: suitcase, backpack, handbag, or other. The
    function will return a request ID, the status of the request (either ''pending'',
    ''in_progress'', or''resolved''), and a comment from the FlyCorp customer service
    team. According to FlyCorp''s policy, all lost luggage reports must be submitted
    within 24 hours of flight arrival. FlyCorp is not responsible for lost luggage
    that is not reported within this timeframe.'
  kind: function_schema
  metadata:
    agent: ''
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: ''
    other: {}
    prompt_id: ''
  name: ReportLostLuggage
  parameters:
    properties:
      contact_email:
        description: The passenger's email address
        format: email
        type: string
      departure_date:
        description: The date of departure of the flight on which the luggage was
          lost
        format: date
        type: string
      flight_number:
        description: The flight number of the flight on which the luggage was lost
        type: string
      luggage_description:
        default: ''
        description: A brief description of the lost luggage
        type: string
      luggage_type:
        description: The type of luggage that was lost
        enum:
        - suitcase
        - backpack
        - handbag
        - other
        type: string
      passenger_name:
        description: The passenger's full name
        type: string
    required:
    - passenger_name
    - flight_number
    - departure_date
    - luggage_type
    - contact_email
    type: object
  return_value:
    properties:
      comment:
        description: A comment from the FlyCorp customer service team
        type: string
      request_id:
        description: The unique ID of the lost luggage report
        type: string
      status:
        description: The status of the lost luggage report
        enum:
        - pending
        - in_progress
        - resolved
        type: string
    required:
    - request_id
    - status
    - comment
    type: object
- function: ReportLostLuggage
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 6fbe398d-8a24-463c-bfef-03d24aaaf0cc
  parameters: {}
- function: ReportLostLuggage
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: cd7ac527-a6a5-4288-ba96-acdb3d7ab1ae
  parameters: {}
- assign: {}
  function: ReportLostLuggage
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 52048c0c-77a6-458a-8be1-2889baa20841
  skip: []
- function: ReportLostLuggage
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: b7810ada-594f-47d3-86f1-638f2041a436
  parameters:
  - passenger_name
- content: Please provide your full name to proceed with the lost luggage report.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3be4a56a-2c16-4790-b2fc-bd58ea875ebd
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 3be4a56a-2c16-4790-b2fc-bd58ea875ebd
  next_node: routing_node
- content: 'According to FlyCorp''s policy, within what time frame after flight arrival
    must all lost luggage reports be submitted?


    User: What is the time limit to report my missing luggage after my flight has
    arrived?'
  kind: user
  metadata:
    agent: ''
    id: a7eaa3d3-847c-4a02-8323-65db5df4dcf8
    node: ''
    other:
      alias: ask_about_docs
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 4456ccb1-3b47-42c9-8828-8be1bcd3832e
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 406f62d3-19a0-4d0a-b9b0-114fa1e4f54c
  next_node: gather_values_node
- function: ReportLostLuggage
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 3ff6c743-fc8c-486b-b6e2-cf5e6577b442
  parameters: {}
- function: ReportLostLuggage
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: ff05b12a-5f68-4241-b0ab-0fe97776c05e
  parameters: {}
- assign: {}
  function: ReportLostLuggage
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 78f56b6c-385b-4f6c-83a3-81d7e4a3eaf2
  skip: []
- answerable_questions:
  - Within what time frame after flight arrival must all lost luggage reports be submitted?
  function: ReportLostLuggage
  kind: answer_from_function_schema_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 78f56b6c-385b-4f6c-83a3-81d7e4a3eaf2
- function: ReportLostLuggage
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 8b6e1366-f36e-4080-9ad9-840d49c8f639
  parameters:
  - passenger_name
- content: According to FlyCorp's policy, all lost luggage reports must be submitted
    within 24 hours of flight arrival. Now, to continue with the lost luggage report,
    please enter your full name.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 7a051520-a39f-436f-96c9-83250c91e568
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 7a051520-a39f-436f-96c9-83250c91e568
  next_node: routing_node
- content: Audrey Renee Winters
  kind: user
  metadata:
    agent: ''
    id: 7f681455-4dde-4648-a56a-053ec406d731
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 73fb9b97-08bf-4624-a59f-d17ce91214d8
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 8f6a92ac-0f1a-4c24-aecc-6874d87e8b79
  next_node: gather_values_node
- function: ReportLostLuggage
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 9e0e928f-2c3e-4128-8289-0f749e380e97
  parameters:
    passenger_name: Audrey Renee Winters
- function: ReportLostLuggage
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 39041bac-e045-41cf-85bd-5dc428b5a8cb
  parameters:
    passenger_name:
      explanation: ''
      status: valid
      value: Audrey Renee Winters
- assign:
    passenger_name: Audrey Renee Winters
  function: ReportLostLuggage
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: e04ce8c2-549b-4217-85c9-6a0952535ead
  skip: []
- function: ReportLostLuggage
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: bea9e830-d31c-4b3d-9374-444f01c22158
  parameters:
  - flight_number
- content: Noted, your name is Audrey Renee Winters. To continue with the lost luggage
    report, please provide your flight number.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: fd33cdc5-6c50-495e-a0e3-64f157d716f1
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: fd33cdc5-6c50-495e-a0e3-64f157d716f1
  next_node: routing_node
- content: My flight number was FC 2817, and I departed on June 18th.
  kind: user
  metadata:
    agent: ''
    id: 06501101-3e44-46af-a162-279994fa047c
    node: ''
    other:
      alias: multislot_instruct3a
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: 7f6eb1a3-844b-49ef-9909-d23cc551ac07
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: 93f8e766-0c06-419a-a077-958691caf8e4
  next_node: gather_values_node
- function: ReportLostLuggage
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: 2ff00da2-098d-4a67-bbf3-c25284e92d26
  parameters:
    departure_date: June 18th
    flight_number: FC 2817
- function: ReportLostLuggage
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 59f44ea4-bfce-4027-a009-d576fe0a602a
  parameters:
    departure_date:
      explanation: The year is not specified.
      status: invalid
      value: June 18th
    flight_number:
      explanation: ''
      status: valid
      value: FC 2817
- assign:
    flight_number: FC 2817
  function: ReportLostLuggage
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 4626fd0e-c4bf-4675-a24c-ea60dde10da8
  skip: []
- function: ReportLostLuggage
  kind: refuse_invalid_function_parameter_value_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: 4626fd0e-c4bf-4675-a24c-ea60dde10da8
  parameter: departure_date
  parameter_value: June 18th
- function: ReportLostLuggage
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: 8266b26b-64ac-4474-9368-b0ad0f442832
  parameters:
  - departure_date
- content: Noted, your flight number is FC 2817. However, the departure date you provided,
    June 18th, is invalid. Please provide your departure date again in a proper format
    such as 2022-06-18.
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 03ff0b3d-f7ff-45e2-bfc0-4fccf01f0c86
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 03ff0b3d-f7ff-45e2-bfc0-4fccf01f0c86
  next_node: routing_node
- content: My flight departed on 2023-06-18.
  kind: user
  metadata:
    agent: ''
    id: f97c33d3-a346-46fb-9a0b-684c416c9af2
    node: ''
    other:
      alias: happy_path
    prompt_id: ''
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: routing_node
    other: {}
    prompt_id: d60e94a8-f78f-4dcd-a021-4c2192e35328
  next_node: intent_discovery_node
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: intent_discovery_node
    other: {}
    prompt_id: ec1ff961-f1b3-49cb-a14c-d2e0a75ed5b3
  next_node: gather_values_node
- function: ReportLostLuggage
  kind: gather_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: gather_values_node
    other: {}
    prompt_id: d4c81721-a341-4b6c-be6e-84de46dd9d4d
  parameters:
    departure_date: '2023-06-18'
- function: ReportLostLuggage
  kind: verify_values_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: verify_values_node
    other: {}
    prompt_id: 10c4d02c-e8cd-4bdf-933f-cbe2a2a0ac60
  parameters:
    departure_date:
      explanation: ''
      status: valid
      value: '2023-06-18'
- assign:
    departure_date: '2023-06-18'
  function: ReportLostLuggage
  kind: update_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: retrospective_plan_node
    other: {}
    prompt_id: db4fb6c7-d7d6-42c5-bb12-cf410c287b19
  skip: []
- function: ReportLostLuggage
  kind: request_function_parameters_thought
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: forward_plan_node
    other: {}
    prompt_id: c8233a3a-b15d-4b88-86fd-904abb5b275c
  parameters:
  - luggage_type
- content: 'Noted, the departure date is set to 2023-06-18. Now, please enter the
    type of your lost luggage. It can be one of the following: suitcase, backpack,
    handbag, or other.'
  kind: assistant
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 71a37d19-02d6-4703-91ad-876a04bf6978
- kind: set_next_node
  metadata:
    agent: teacher_formfiller
    id: 36ffb824-0ec7-4037-80b4-ebb9ddf106fb
    node: generation_node
    other: {}
    prompt_id: 71a37d19-02d6-4703-91ad-876a04bf6978
  next_node: routing_node
- content: Suitcase
  kind: user
  metadata:
    agent: ''
    id: dd3f27fa-af17-4f2d-b13b-9dc4ed2c8d47
    node: ''
    other:
      alias: test_behavior
    prompt_id: ''
